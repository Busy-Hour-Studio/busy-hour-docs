"use strict";(self.webpackChunk_busy_hour_docs=self.webpackChunk_busy_hour_docs||[]).push([[1944],{2993:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>x,frontMatter:()=>a,metadata:()=>h,toc:()=>l});var t=n(1527),i=n(6225),r=n(4752);const a={sidebar_position:2,sidebar_label:"Managing Chats"},d="Managing Chat Messages",h={id:"react/v2/messaging/managing-chats",title:"Managing Chat Messages",description:"In this section, we will show you how to manage chat messages from the messaging service.",source:"@site/docs/react/v2/messaging/managing-chats.mdx",sourceDirName:"react/v2/messaging",slug:"/react/v2/messaging/managing-chats",permalink:"/docs/react/v2/messaging/managing-chats",draft:!1,unlisted:!1,editUrl:"https://github.com/Busy-Hour-Studio/busy-hour-docs/tree/main/docs/react/v2/messaging/managing-chats.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Managing Chats"},sidebar:"tutorialSidebar",previous:{title:"Listening to Messages",permalink:"/docs/react/v2/messaging/listening-to-messages"},next:{title:"Handling Chat Messaging",permalink:"/docs/react/v2/messaging/handling-messaging"}},c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Managing Chat Messages",id:"managing-chat-messages-1",level:2},{value:"Creating Chat Messages",id:"creating-chat-messages",level:2},{value:"Member Object",id:"member-object",level:3},{value:"Quick Example",id:"quick-example",level:3},{value:"Updating Chat Messages",id:"updating-chat-messages",level:2},{value:"Quick Example",id:"quick-example-1",level:3},{value:"Deleting Chat Messages",id:"deleting-chat-messages",level:2},{value:"Quick Example",id:"quick-example-2",level:3},{value:"Adding Members",id:"adding-members",level:2},{value:"Quick Example",id:"quick-example-3",level:3},{value:"Removing Members",id:"removing-members",level:2},{value:"Quick Example",id:"quick-example-4",level:3},{value:"Leave Chat",id:"leave-chat",level:2},{value:"Quick Example",id:"quick-example-5",level:3}];function o(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"managing-chat-messages",children:"Managing Chat Messages"}),"\n",(0,t.jsx)(s.p,{children:"In this section, we will show you how to manage chat messages from the messaging service."}),"\n",(0,t.jsx)(s.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(r.Z,{}),"\n",(0,t.jsx)(s.h2,{id:"managing-chat-messages-1",children:"Managing Chat Messages"}),"\n",(0,t.jsxs)(s.p,{children:["To start managing your chat messages (e.g. ",(0,t.jsx)(s.code,{children:"create"}),", ",(0,t.jsx)(s.code,{children:"update"}),", ",(0,t.jsx)(s.code,{children:"delete"}),", etc.), you will need to use the ",(0,t.jsx)(s.code,{children:"useChatManager"})," hook which is exported from the ",(0,t.jsx)(s.code,{children:"@busy-hour/react/hooks"})," or ",(0,t.jsx)(s.code,{children:"@busy-hour/react/hooks/v2"})," package. The hook then will return an object detailed as below:"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"createChat"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"function"})}),(0,t.jsx)(s.td,{children:"Create a new chat message"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"updateChat"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"function"})}),(0,t.jsx)(s.td,{children:"Update an existing chat message"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"deleteChat"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"function"})}),(0,t.jsx)(s.td,{children:"Delete an existing chat message"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"addMember"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"function"})}),(0,t.jsx)(s.td,{children:"Add member to the chat message"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"removeMember"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"function"})}),(0,t.jsx)(s.td,{children:"Remove member to the chat message"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"leaveChat"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"function"})}),(0,t.jsx)(s.td,{children:"Leave from chat message"})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"creating-chat-messages",children:"Creating Chat Messages"}),"\n",(0,t.jsxs)(s.p,{children:["To create a chat message, you can use the ",(0,t.jsx)(s.code,{children:"createChat"})," function which is one of the return properties of the ",(0,t.jsx)(s.code,{children:"useChatManager"})," hook. To use it, you need to pass some properties which detailed as below."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"avatar"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"string"})," (optional)"]}),(0,t.jsx)(s.td,{children:"The avatar of the chat messages"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"name"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"string"})," (optional)"]}),(0,t.jsx)(s.td,{children:"The name of the chat messages"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"description"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"string"})," (optional)"]}),(0,t.jsx)(s.td,{children:"The description of the chat messages"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"metadata"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"object"})," (optional)"]}),(0,t.jsx)(s.td,{children:"The metadata of the chat message"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"type"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"ChatType"})," (optional)"]}),(0,t.jsx)(s.td,{children:"The type of the chat message"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"members"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Member[]"})}),(0,t.jsx)(s.td,{children:"List of member to be added to the chat messages"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"member-object",children:"Member Object"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"userId"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"string"})}),(0,t.jsx)(s.td,{children:"User id to be added"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"role"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ChatRole"})}),(0,t.jsx)(s.td,{children:"User role to be added"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"quick-example",children:"Quick Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"import { useChatManager } from '@busy-hour/react/hooks';\nimport { ChatType, ChatRole } from '@busy-hour/react/enums/v2';\n\nexport default function Main() {\n  // highlight-next-line\n  const { createChat } = useChatManager();\n\n  const createChatMessages = async () => {\n    // highlight-start\n    return createChat({\n      name: 'My Group',\n      description: 'This is my group',\n      // can be ChatType.PRIVATE, ChatType.GROUP, ChatType.PERSONAL, or any custom type\n      type: ChatType.GROUP,\n      members: [\n        {\n          userId: 'your-user-id',\n          role: ChatRole.ADMIN,\n        },\n        {\n          userId: 'other-user-id',\n          role: ChatRole.MEMBER,\n        },\n      ],\n    });\n    // highlight-end\n  };\n\n  return <MainApp />;\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"updating-chat-messages",children:"Updating Chat Messages"}),"\n",(0,t.jsxs)(s.p,{children:["To update a chat message, you can use the ",(0,t.jsx)(s.code,{children:"updateChat"})," function which is one of the return properties of the ",(0,t.jsx)(s.code,{children:"useChatManager"})," hook. To use it, you need to pass some properties which detailed as below."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"avatar"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"string"})," (optional)"]}),(0,t.jsx)(s.td,{children:"The avatar of the chat messages"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"name"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"string"})," (optional)"]}),(0,t.jsx)(s.td,{children:"The name of the chat messages"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"description"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"string"})," (optional)"]}),(0,t.jsx)(s.td,{children:"The description of the chat messages"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"metadata"})}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"object"})," (optional)"]}),(0,t.jsx)(s.td,{children:"The metadata of the chat message"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"quick-example-1",children:"Quick Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"import { useChatManager } from '@busy-hour/react/hooks';\nimport { ChatType, ChatRole } from '@busy-hour/react/enums/v2';\n\nexport default function Main() {\n  // highlight-next-line\n  const { updateChat } = useChatManager();\n\n  const updateChatMessages = async () => {\n    // highlight-start\n    return updateChat({\n      name: 'My New Group',\n      description: 'This is my new group',\n      // Custom data for the chat\n      metadata: {\n        key: 'value',\n      },\n    });\n    // highlight-end\n  };\n\n  return <MainApp />;\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"deleting-chat-messages",children:"Deleting Chat Messages"}),"\n",(0,t.jsxs)(s.p,{children:["To delete a chat message, you can use the ",(0,t.jsx)(s.code,{children:"deleteChat"})," function which is one of the return properties of the ",(0,t.jsx)(s.code,{children:"useChatManager"})," hook. To use it, you just need to pass the ",(0,t.jsx)(s.code,{children:"chatId"})," to delete."]}),"\n",(0,t.jsx)(s.h3,{id:"quick-example-2",children:"Quick Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"import { useChatManager } from '@busy-hour/react-native/hooks';\n\nexport default function Main() {\n  // highlight-next-line\n  const { deleteChat } = useChatManager();\n\n  const deleteChatMessages = async () => {\n    // highlight-next-line\n    return deleteChat('chat-id');\n  };\n\n  return <MainApp />;\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"adding-members",children:"Adding Members"}),"\n",(0,t.jsxs)(s.p,{children:["To add a member to a chat message, you can use the ",(0,t.jsx)(s.code,{children:"addMember"})," function which is one of the return properties of the ",(0,t.jsx)(s.code,{children:"useChatManager"})," hook. To use it, you need to pass some properties which detailed as below."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"chatId"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"string"})}),(0,t.jsx)(s.td,{children:"Chat id to be updated"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"members"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Member[]"})}),(0,t.jsx)(s.td,{children:"List of member to be added to the chat messages"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"quick-example-3",children:"Quick Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"import { useChatManager } from '@busy-hour/react-native/hooks';\nimport { ChatRole } from '@busy-hour/react-native/enums/v2';\n\nexport default function Main() {\n  // highlight-next-line\n  const { addMember } = useChatManager();\n\n  const addChatMembers = async () => {\n    // highlight-start\n    return addMember('chat-id', [\n      {\n        userId: 'other-user-id-1',\n        role: ChatRole.ADMIN,\n      },\n      {\n        userId: 'other-user-id-2',\n        role: 'your-custom-role',\n      },\n    ]);\n    // highlight-end\n  };\n\n  return <MainApp />;\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"removing-members",children:"Removing Members"}),"\n",(0,t.jsxs)(s.p,{children:["To remove a member to a chat message, you can use the ",(0,t.jsx)(s.code,{children:"removeMember"})," function which is one of the return properties of the ",(0,t.jsx)(s.code,{children:"useChatManager"})," hook. To use it, you need to pass some properties which detailed as below."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"chatId"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"string"})}),(0,t.jsx)(s.td,{children:"Chat id to be updated"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"members"})}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"string[]"})}),(0,t.jsx)(s.td,{children:"List of member user id to be removed from the chat messages"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"quick-example-4",children:"Quick Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"import { useChatManager } from '@busy-hour/react-native/hooks';\n\nexport default function Main() {\n  // highlight-next-line\n  const { removeMember } = useChatManager();\n\n  const removeChatMembers = async () => {\n    // highlight-start\n    return removeMember('chat-id', ['other-user-id-1', 'other-user-id-2']);\n    // highlight-end\n  };\n\n  return <MainApp />;\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"leave-chat",children:"Leave Chat"}),"\n",(0,t.jsxs)(s.p,{children:["To leave a chat message, you can use the ",(0,t.jsx)(s.code,{children:"leaveChat"})," function which is one of the return properties of the ",(0,t.jsx)(s.code,{children:"useChatManager"})," hook. To use it, you just need to pass the ",(0,t.jsx)(s.code,{children:"chatId"})," to leave."]}),"\n",(0,t.jsx)(s.h3,{id:"quick-example-5",children:"Quick Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-tsx",children:"import { useChatManager } from '@busy-hour/react-native/hooks';\n\nexport default function Main() {\n  // highlight-next-line\n  const { leaveChat } = useChatManager();\n\n  const leaveChatMessages = async () => {\n    // highlight-start\n    return leaveChat('chat-id');\n    // highlight-end\n  };\n\n  return <MainApp />;\n}\n"})})]})}function x(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},4752:(e,s,n)=>{n.d(s,{Z:()=>r});var t=n(3448),i=(n(959),n(1527));const r=function(){return(0,i.jsxs)("ol",{children:[(0,i.jsxs)("li",{children:["App Initialized (see"," ",(0,i.jsx)(t.Z,{to:"../../getting-started#initializing-busy-hour-projectapp)",children:"Initializing Busy Hour Project/App"}),")"]}),(0,i.jsxs)("li",{children:["Main Service Initialized (see",(0,i.jsx)(t.Z,{to:"../../getting-started#initializing-busy-hour-main-service",children:"Initializing Busy Hour Main Service"}),")"]}),(0,i.jsxs)("li",{children:["Messaging Service Initialized (see"," ",(0,i.jsx)(t.Z,{to:"../../initializing-services#initializing-messaging",children:"Initializing Messaging"}),")"]})]})}},6225:(e,s,n)=>{n.d(s,{Z:()=>d,a:()=>a});var t=n(959);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);